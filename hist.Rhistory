1+1
1+1
plot(c(1.1))
{
"cells": [
{
"cell_type": "markdown",
"id": "hungarian-letters",
"metadata": {},
"source": [
"# Ejemplo de lectura de archivos .csv"
]
},
{
"cell_type": "markdown",
"id": "therapeutic-specific",
"metadata": {},
"source": [
"Este notebook muestra los primeros pasos para para hacer anÃ¡lisis exploratorio de datos."
]
},
{
"cell_type": "markdown",
"id": "acquired-weapon",
"metadata": {},
"source": [
"### Verificar que estamos en el directorio correcto."
]
},
{
"cell_type": "code",
"execution_count": 1,
"id": "minor-bulgaria",
"metadata": {},
"outputs": [
{
"data": {
"text/html": [
"'C:/Users/mancp'"
],
"text/latex": [
"'C:/Users/mancp'"
],
"text/markdown": [
"'C:/Users/mancp'"
],
"text/plain": [
"[1] \"C:/Users/mancp\""
]
},
"metadata": {},
"output_type": "display_data"
}
],
"source": [
"getwd()"
]
},
{
"cell_type": "markdown",
"id": "cooperative-warrior",
"metadata": {},
"source": [
"No, mis archivos de trabajo estÃ¡n en otra parte. AquÃ­ es donde **cada quien** pone su directorio de trabajo."
]
},
{
"cell_type": "code",
"execution_count": 2,
"id": "actual-blues",
"metadata": {},
"outputs": [],
"source": [
"setwd('d:/ProgsD/R')"
]
},
{
"cell_type": "code",
"execution_count": 3,
"id": "pretty-internet",
"metadata": {
"scrolled": true
},
"outputs": [
{
"data": {
"text/html": [
"'d:/ProgsD/R'"
],
"text/latex": [
"'d:/ProgsD/R'"
],
"text/markdown": [
"'d:/ProgsD/R'"
],
"text/plain": [
"[1] \"d:/ProgsD/R\""
]
},
"metadata": {},
"output_type": "display_data"
}
],
"source": [
"getwd()"
]
},
{
"cell_type": "markdown",
"id": "informative-anger",
"metadata": {},
"source": [
"Ahora si. Se puede pedir el directorio con 'dir()' si se desea verificar."
]
},
{
"cell_type": "code",
"execution_count": null,
"id": "chicken-replica",
"metadata": {},
"outputs": [],
"source": [
"dir()"
]
},
{
"cell_type": "markdown",
"id": "chinese-asbestos",
"metadata": {},
"source": [
"### Leer el archivo"
]
},
{
"cell_type": "markdown",
"id": "applicable-heath",
"metadata": {},
"source": [
"Ahora se lee el archivo y se guarda en una variable con el mismo nombre. Claro, es ditinto una variable con nombre Dato que la cadena 'Dato'."
]
},
{
"cell_type": "code",
"execution_count": 11,
"id": "differential-journey",
"metadata": {},
"outputs": [],
"source": [
"EjemBasico = read.csv('EjemBasico.csv')"
]
},
{
"cell_type": "markdown",
"id": "dominant-panama",
"metadata": {},
"source": [
"Ahora tenemos un dataframe con el mismo nombre del archivo. Se puede comprobar el tipo de dato, ver el contenido con head o pedir un resumen de datos con summary:"
]
},
{
"cell_type": "code",
"execution_count": null,
"id": "oriental-decline",
"metadata": {},
"outputs": [],
"source": [
"class(EjemBasico)"
]
},
{
"cell_type": "code",
"execution_count": null,
"id": "toxic-clinic",
"metadata": {},
"outputs": [],
"source": [
"head(EjemBasico,4)"
]
},
{
"cell_type": "code",
"execution_count": null,
"id": "beautiful-backing",
"metadata": {},
"outputs": [],
"source": [
"summary(EjemBasico)"
]
},
{
"cell_type": "markdown",
"id": "reasonable-scientist",
"metadata": {},
"source": [
"Para ver el renglÃ³n 2:"
]
},
{
"cell_type": "code",
"execution_count": null,
"id": "special-environment",
"metadata": {},
"outputs": [],
"source": [
"EjemBasico[2,]"
]
},
{
"cell_type": "markdown",
"id": "tested-signature",
"metadata": {},
"source": [
"Para separar la columna 3:"
]
},
{
"cell_type": "code",
"execution_count": null,
"id": "dependent-neighbor",
"metadata": {},
"outputs": [],
"source": [
"EjemBasico[,3]"
]
},
{
"cell_type": "markdown",
"id": "extensive-triumph",
"metadata": {},
"source": [
"Otra menera serÃ­a con el nombre de la variable."
]
},
{
"cell_type": "code",
"execution_count": null,
"id": "revolutionary-little",
"metadata": {},
"outputs": [],
"source": [
"EjemBasico[,'Riesgo']"
]
},
{
"cell_type": "markdown",
"id": "russian-contrast",
"metadata": {},
"source": [
"Separar columnas o renglones es bÃ¡sico para poder hacer anÃ¡lisis como el agrupamiento, pues por lo general no se agrupa por todas las variables, sino solo por un grupo de estas. \n",
"\n",
"Columnas o renglones separados pueden guardarse en dataframes intermedios para facilitar su anÃ¡lisis."
]
}
],
"metadata": {
"kernelspec": {
"display_name": "R",
"language": "R",
"name": "ir"
},
"language_info": {
"codemirror_mode": "r",
"file_extension": ".r",
"mimetype": "text/x-r-source",
"name": "R",
"pygments_lexer": "r",
"version": "4.0.3"
}
},
"nbformat": 4,
"nbformat_minor": 5
}
install.packages('ggplot2')
install.packages("stats")install.packages("stats")i
install.packages('stats')
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats19")
install.packages("stats")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggfortify")
install.packages("mlbench")
install.packages("cluster")
Import Datase
EjemB.f = EjemB
EjemB.f$Type <- NULL
View(EjemB.f)
EjemB.stand <- scale(EjemB.f[-1])
View(EjemB.stand)
EjemB.stand <- scale(EjemB.f[-1])
View(EjemB.stand)
results <- kmeans(EjemB.stand, 3)
attributes(results)
install.packages("DBI")
install.packages("XLConnect")
install.packages("dplyr")
install.packages("tidyr")
install.packages("data.table")
install.packages("gganimate")
install.packages("leaflet")
install.packages("Rcpp")
alrquality
airquality
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
install.packages('IRkernel')
IRkernel::installspec()
jupyter labextension install @techrah/text-shortcuts
jupyter labextension install @techrah/text-shortcuts
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
jupyter labextension install @techrah/text-shortcuts
airquality
head(airquality)
`LecturaCSV.(2)` <- read.csv("C:/Users/alfre/Downloads/LecturaCSV (2).ipynb", sep="")
View(`LecturaCSV.(2)`)
EjemBasico <- read.csv("C:/Users/alfre/Desktop/EjemBasico.csv")
View(EjemBasico)
EjemBasico <- read.csv("C:/Users/alfre/Desktop/EjemBasico.csv")
View(EjemBasico)
head(airquality)
antidad <-c(2.456,2.325,2.250,2.200,2.100,2.082,2.045,2.024)
cantidad <-c(2.456,2.325,2.250,2.200,2.100,2.082,2.045,2.024)
Precio<-c(82,92,94,99,106,108,112,115)
mean(Cantidad)
library(readr)
EjemBasico <- read_csv("trabajos/EjemBasico.csv")
View(EjemBasico)
summary(EjemBasico)
head(EjemBasico)
plot(EjemBasico)
barplot(EjemBasico(x))
barplot(EjemBasico)
barplot(EjemBasico(EjemBasico))
> x<-c(1,1,1,1,1,2,2,3,3,3,5,6,6,7,7,7)
x<-c(1,1,1,1,1,2,2,3,3,3,5,6,6,7,7,7)
table(x)
barplot(table(x))
plot(x,y)
x<-1:10
y=x^2
plot(x,y)
plot(x,y,type=”l”)
plot(x,y,type='l')
install.packages("MASS")
library(readr)
Puntos <- read_csv("trabajos/Puntos.csv")
View(Puntos)
PLOT(Puntos)
plot(Puntos)
kmeans(Puntos,centers = 3)
kmanstt<-kmeans(Puntos,centers = 3)
plot(Puntos,col=kmeans$cluster)
plot(Puntos,col=kmeans$cluster=3)
kmeans(Puntos,centers = 3)
1
plot()
require(MASS)
plot(Puntos)
kmeans.res<-kmeans(Puntos,centers=3)
plot(Puntos,col=kmeans.res$cluster)
points(kmeans.res$centers,cex=2,col=11,pch*19)
points(kmeans.res$centers)
savehistory("C:/Users/alfre/Desktop/hist.Rhistory")
